====================
README - SCCS Cygnet
====================
Last modified 03/31/2014.

This is an information file for the codebase running the SCCS online cygnet.

Files:
- .htaccess
- index.php
- cygnet.css
- client.js
- backend.py
- photos/
- media/
- settings_base.py
- settings_server.py

===============================
DIRECTORY STRUCTURE FOR MEDIA

When setting up the cygnet you must create the following directory structure
as this is how the pictures are stored an served at the moment.

The current folder layout organizing the ID-pictures looks like this

CYGNET_ROOT       
    - media               --> general media folder
        
        - tmp             --> a working directory where the cygnet resizes pics
                              that came straight from the ITS DB
        - assets          --> media assets such as the alternate pic and 
                              ITS placeholder etc.
        - photos          
            - vanilla     --> contains the pictures as they are found in the
                              ITS database, thus vanilla as in plain
            - mod         --> if students request a picture change one simply places
                              said picture in here (with the appropriate name). 
                              The backend will always look in here first for the picture.




===============================
CHANGELOG

Version 3.5 - The Never-quite-done Cygnet 

Another substantial overhaul of the cygnet as a late consequence of the 
campus wide ****-storm of spring 2013. Now more FERPA-compliant than ever.

Major changes:

- Eliminated the directory file altogether. The directory is now an extension
  of the Banner database in the form of a MariaDB view supplied to us by ITS.

- The get_matches function now generates a big-a** SQL query using the terms 
  from terms_to_dict and passes each row into a Student_Record object.

- Added the Student_Record classs which handles parsing the user row data for 
  use by the frontend by:
    - checking if a picture locally exists or the user requested it be hidden
    - pulls the image from the ITS db if it doesn't exist.
    - checking if user is off-campus/on leave
    - constructing a dict to be passed as a JSON object to the frontend

- settings.py now needs and has more variables:
  - PHOTO_HIDDEN : a list of users (by user_id) that have asked for the picture to be hidden
  - ITS_DB_DATA : a dictionary with credentials to authenticate agains the ITS database


Other changes:

- changed BASE_DIR in settings_base.py to os.path.dirname(os.path.realpath(__file__))
  - didn't seem to always work before

- separated picutres out into /photos/vanilla and /photos/mod directories for 
  unchanged and changed cygnet pictures respectively.

- added MOD_PHOTO_POSTFIX and VANILLA_PHOTO_POSTFIX constants to mark each type
  of picture respectively in settings_base.py

- added VANILLA_PHOTO_DIRECTORY, MOD_PHOTO_DIRECTORY, TMP_DIR, as the paths where
  the pictures are saved/cached




---------------------------------------------------
Version 3.0 - The Never-quite-done Cygnet (pending)

Substantial overhaul of the Cygnet code, both frontend and backend - changes
ranging from file organization to security to speed to aesthetic appeal.

Major changes:

- Switched backend<-->frontend communication from XML to JSON to improve
  page generation and parsing speed.

- Changed backend to check if photo files exist before returning a path to
  them, using photos/alternate.jpg if the file is missing.  (This means we
  can just remove photos files without replacing them with symlinks to
  alternate.jpg, and missing files won't show up as broken images.  Also,
  hiding a photo will take effect immediately - no browser caching delay.)

- Made security improvements to prevent access to hidden photos or to the raw
  Python files (e.g. settings.py with the excluded-users list).

- Reorganized and renamed most code files (cygnetxml.py -> backend.py,
  livecygnet.js -> client.js, config.py -> settings*.py, etc.); moved static
  images into /media and student picture directories into /photos.

- Simplified frontend appearance with much less text and clutter.

Other changes:

- Implemented full support for quoting with both single and double quotes, so
  that e.g. "HAL 3" will only match records with "HAL 3" as a contiguous
  substring of some field, rather than anything with both "HAL" and "3".  To
  explicitly search the address field, one can even do "address:'HAL 3'".

- Added ability to recover gracefully from backend errors (e.g. HTTP 500
  errors or Python exceptions), printing information returned via JSON.

- Replaced old spinner icon with a new one from http://www.ajaxload.info/.

- Added Cygnet-specific logging ability for debugging purposes, which
  on the server defaults to logging to /var/log/cygnet/cygnet.log.

- Reduced dependence on a specific Apache virtual host configuration by
  putting the directive that causes backend.py to be handled as a CGI script
  into a local .htaccess instead of the virtual host file.

- Minor cosmetic changes, e.g. using 'result' instead of 'results' when only
  one result is returned, etc.


---------------------------------------------------
Version 2.0 - The Live Cygnet

Cygnet becomes "live" i.e. uses AJAX for requests instead of traditional
form submission where you click a button and the page refreshes.

---------------------------------------------------
Version 1.0 - The First Cygnet

First online cygnet?
